
-- MySQL Script generated by MySQL Workbench
-- 11/11/15 06:15:07
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`users` ;

CREATE TABLE IF NOT EXISTS `mydb`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `facebook_id` VARCHAR(45) NOT NULL,
  `gcm_id` VARCHAR(45) NULL,
  `event_played` INT NULL DEFAULT 0,
  `score` INT NULL DEFAULT 0,
  `correct_attempt` INT NULL DEFAULT 0 COMMENT 'User Table  contatining user info',
  `wrong_attempt` INT NULL DEFAULT 0,
  `un_attempt` INT NULL DEFAULT 0,
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`questions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`questions` ;

CREATE TABLE IF NOT EXISTS `mydb`.`questions` (
  `question_id` INT NOT NULL AUTO_INCREMENT,
  `question_text` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`question_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`options` ;

CREATE TABLE IF NOT EXISTS `mydb`.`options` (
  `option_id` INT NOT NULL,
  `question_id` INT NOT NULL,
  `option_text` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`option_id`),
  INDEX `fk_options_questions_idx` (`question_id` ASC),
  CONSTRAINT `fk_options_questions`
    FOREIGN KEY (`question_id`)
    REFERENCES `mydb`.`questions` (`question_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`parent_topic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`parent_topic` ;

CREATE TABLE IF NOT EXISTS `mydb`.`parent_topic` (
  `parent_topic_id` INT NOT NULL,
  `parent_topic_name` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`parent_topic_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`topic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`topic` ;

CREATE TABLE IF NOT EXISTS `mydb`.`topic` (
  `topic_id` INT NOT NULL,
  `parent_topic_id` INT NOT NULL,
  `question_id` INT NOT NULL,
  `topic_name` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`topic_id`),
  INDEX `fk_topic_questions1_idx` (`question_id` ASC),
  INDEX `fk_topic_parent_topic1_idx` (`parent_topic_id` ASC),
  CONSTRAINT `fk_topic_questions1`
    FOREIGN KEY (`question_id`)
    REFERENCES `mydb`.`questions` (`question_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_topic_parent_topic1`
    FOREIGN KEY (`parent_topic_id`)
    REFERENCES `mydb`.`parent_topic` (`parent_topic_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`quiz`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`quiz` ;

CREATE TABLE IF NOT EXISTS `mydb`.`quiz` (
  `quiz_id` INT NOT NULL,
  `quiz_name` VARCHAR(1000) NOT NULL,
  `topic_id` INT NOT NULL,
  `is_active` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`quiz_id`),
  INDEX `fk_quiz_topic1_idx` (`topic_id` ASC),
  CONSTRAINT `fk_quiz_topic1`
    FOREIGN KEY (`topic_id`)
    REFERENCES `mydb`.`topic` (`topic_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`quiz_questions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`quiz_questions` ;

CREATE TABLE IF NOT EXISTS `mydb`.`quiz_questions` (
  `quiz_question_id` INT NOT NULL,
  `quiz_id` INT NOT NULL,
  `questions__id` INT NOT NULL,
  PRIMARY KEY (`quiz_question_id`),
  INDEX `fk_quiz_questions_questions1_idx` (`questions__id` ASC),
  INDEX `fk_quiz_questions_quiz1_idx` (`quiz_id` ASC),
  CONSTRAINT `fk_quiz_questions_questions1`
    FOREIGN KEY (`questions__id`)
    REFERENCES `mydb`.`questions` (`question_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quiz_questions_quiz1`
    FOREIGN KEY (`quiz_id`)
    REFERENCES `mydb`.`quiz` (`quiz_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`user_participated_quiz`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user_participated_quiz` ;

CREATE TABLE IF NOT EXISTS `mydb`.`user_participated_quiz` (
  `user_participated_quiz_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `quiz_id` INT NOT NULL,
  `quiz_score` INT NULL,
  `quiz_correct_attempted` INT NULL,
  `quiz_wrong_attempted` INT NULL,
  `quiz_unattempted` INT NULL,
  `is_completed` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`user_participated_quiz_id`),
  INDEX `fk_user_participated_quiz_users1_idx` (`user_id` ASC),
  INDEX `fk_user_participated_quiz_quiz1_idx` (`quiz_id` ASC),
  CONSTRAINT `fk_user_participated_quiz_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_participated_quiz_quiz1`
    FOREIGN KEY (`quiz_id`)
    REFERENCES `mydb`.`quiz` (`quiz_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
